// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyShopOnline.Data;

#nullable disable

namespace MyShopOnline.Migrations
{
    [DbContext(typeof(MyShopOnlineDbContext))]
    [Migration("20240426151347_NewFirst")]
    partial class NewFirst
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyShopOnline.Data.Entities.Advertisement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageWay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StateId");

                    b.HasIndex("StatusId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryId = 1,
                            Date = new DateTime(2022, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Smartphone",
                            ImageUrl = "https://applecity.com.ua/image/cache/catalog/0iphone/ipohnex/iphone-x-black-1000x1000.png",
                            InStock = false,
                            Name = "iPhone X",
                            Price = 650m,
                            Quantity = 0,
                            SellerName = "qweer",
                            SellerPhone = "0985521562",
                            StateId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryId = 2,
                            Date = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ball",
                            ImageUrl = "https://http2.mlstatic.com/D_NQ_NP_727192-CBT53879999753_022023-V.jpg",
                            InStock = false,
                            Name = "PowerBall",
                            Price = 45.5m,
                            Quantity = 0,
                            SellerName = "wolf",
                            SellerPhone = "0985534322",
                            StateId = 2,
                            StatusId = 2
                        },
                        new
                        {
                            ID = 3,
                            CategoryId = 3,
                            Date = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Good t-shirt",
                            ImageUrl = "https://www.seekpng.com/png/detail/316-3168852_nike-air-logo-t-shirt-nike-t-shirt.png",
                            InStock = true,
                            Name = "Nike T-Shirt",
                            Price = 189m,
                            Quantity = 5,
                            SellerName = "cat",
                            SellerPhone = "0984535362",
                            StateId = 2,
                            StatusId = 3
                        },
                        new
                        {
                            ID = 4,
                            CategoryId = 1,
                            Date = new DateTime(2022, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Smartphone",
                            ImageUrl = "https://sota.kh.ua/image/cache/data/Samsung-2/samsung-s23-s23plus-blk-01-700x700.webp",
                            InStock = true,
                            Name = "Samsung S23",
                            Price = 1200m,
                            Quantity = 5,
                            SellerName = "Rivne",
                            SellerPhone = "0984652666",
                            StateId = 1,
                            StatusId = 4
                        },
                        new
                        {
                            ID = 5,
                            CategoryId = 6,
                            Date = new DateTime(2023, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ball",
                            ImageUrl = "https://cdn.shopify.com/s/files/1/0046/1163/7320/products/69ee701e-e806-4c4d-b804-d53dc1f0e11a_grande.jpg",
                            InStock = false,
                            Name = "Air Ball",
                            Price = 50m,
                            Quantity = 0,
                            SellerName = "urt",
                            SellerPhone = "0985527882",
                            StateId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            ID = 6,
                            CategoryId = 1,
                            Date = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Leptop",
                            ImageUrl = "https://newtime.ua/image/import/catalog/mac/macbook_pro/MacBook-Pro-16-2019/MacBook-Pro-16-Space-Gray-2019/MacBook-Pro-16-Space-Gray-00.webp",
                            InStock = true,
                            Name = "MacBook Pro 2019",
                            Price = 1200m,
                            Quantity = 5,
                            SellerName = "SellerOut",
                            SellerPhone = "0985314523",
                            StateId = 1,
                            StatusId = 6
                        },
                        new
                        {
                            ID = 7,
                            CategoryId = 1,
                            Date = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Leptop",
                            ImageUrl = "https://newtime.ua/image/import/catalog/mac/macbook_pro/MacBook-Pro-16-2019/MacBook-Pro-16-Space-Gray-2019/MacBook-Pro-16-Space-Gray-00.webp",
                            InStock = true,
                            Name = "MacBook Pro 2019",
                            Price = 1200m,
                            Quantity = 5,
                            SellerName = "SellerOut",
                            SellerPhone = "0985314523",
                            StateId = 1,
                            StatusId = 6
                        },
                        new
                        {
                            ID = 8,
                            CategoryId = 1,
                            Date = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Samsung Galaxy Samsung Galaxy",
                            ImageUrl = "https://scdn.comfy.ua/89fc351a-22e7-41ee-8321-f8a9356ca351/https://cdn.comfy.ua/media/catalog/product/s/m/sm-a245_galaxy_a24_lte_light_green_front.png/w_600",
                            InStock = true,
                            Name = "Samsung Galaxy",
                            Price = 800m,
                            Quantity = 9,
                            SellerName = "SellerOut1",
                            SellerPhone = "0985314523",
                            StateId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryId = 10,
                            Date = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Acer Electrical Scooter 5  Acer Electrical Scooter 5",
                            ImageUrl = "https://scdn.comfy.ua/89fc351a-22e7-41ee-8321-f8a9356ca351/https://cdn.comfy.ua/media/catalog/product/e/s/escooter_series_05_gallery_01.jpg/w_600",
                            InStock = true,
                            Name = "Acer Electrical Scooter 5",
                            Price = 2200m,
                            Quantity = 5,
                            SellerName = "SellerOut2",
                            SellerPhone = "0985314523",
                            StateId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryId = 9,
                            Date = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tefal B817S255 INTUITION 20 /26 ",
                            ImageUrl = "https://scdn.comfy.ua/89fc351a-22e7-41ee-8321-f8a9356ca351/https://cdn.comfy.ua/media/catalog/product/_/t/_tefal_b817s255_intuition_20__13.jpg/w_600",
                            InStock = false,
                            Name = "Tefal",
                            Price = 100m,
                            Quantity = 0,
                            SellerName = "SellerOut2",
                            SellerPhone = "0985314523",
                            StateId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            ID = 11,
                            CategoryId = 9,
                            Date = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tefal Infiny force HB943838",
                            ImageUrl = "https://scdn.comfy.ua/89fc351a-22e7-41ee-8321-f8a9356ca351/https://cdn.comfy.ua/media/catalog/product/t/e/tefal_hb943838_2.jpg/w_600",
                            InStock = true,
                            Name = "Blender ",
                            Price = 200m,
                            Quantity = 10,
                            SellerName = "SellerOut1",
                            SellerPhone = "0985314523",
                            StateId = 1,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("MyShopOnline.Data.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Sport"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Fashion"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Home & Garden"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Transport"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Toys & Hobbies"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Musical Instruments"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Art"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Other"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Car"
                        },
                        new
                        {
                            ID = 11,
                            Name = "Animal"
                        },
                        new
                        {
                            ID = 12,
                            Name = "Tools"
                        });
                });

            modelBuilder.Entity("MyShopOnline.Data.Entities.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "New"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Used"
                        });
                });

            modelBuilder.Entity("MyShopOnline.Data.Entities.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Requires approval"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Displayed/Active"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Hidden/Inactive"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Blocked"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Under consideration"
                        },
                        new
                        {
                            ID = 6,
                            Name = "In processing"
                        },
                        new
                        {
                            ID = 7,
                            Name = "In the way"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Completed"
                        },
                        new
                        {
                            ID = 9,
                            Name = "In the archive"
                        });
                });

            modelBuilder.Entity("MyShopOnline.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyShopOnline.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyShopOnline.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShopOnline.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyShopOnline.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyShopOnline.Data.Entities.Advertisement", b =>
                {
                    b.HasOne("MyShopOnline.Data.Entities.Category", "Category")
                        .WithMany("Advertisements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShopOnline.Data.Entities.State", "State")
                        .WithMany("Advertisements")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShopOnline.Data.Entities.Status", "Status")
                        .WithMany("Advertisements")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("State");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MyShopOnline.Data.Entities.Category", b =>
                {
                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("MyShopOnline.Data.Entities.State", b =>
                {
                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("MyShopOnline.Data.Entities.Status", b =>
                {
                    b.Navigation("Advertisements");
                });
#pragma warning restore 612, 618
        }
    }
}
